package com.ty.springBoot_FoodApp.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.ty.springBoot_FoodApp.Config.ResponseStructure;
import com.ty.springBoot_FoodApp.Exception.UserIdNotFoundException;
import com.ty.springBoot_FoodApp.dao.FoodOrderDao;
import com.ty.springBoot_FoodApp.dto.FoodOrder;
import com.ty.springBoot_FoodApp.dto.Items;
import com.ty.springBoot_FoodApp.dto.Menu;

@Service
public class FoodOrderService {
	@Autowired
	private FoodOrderDao dao;
	
	public ResponseEntity<ResponseStructure<FoodOrder>> saveFoodOrder(FoodOrder foodOrder) {
		ResponseStructure<FoodOrder> responseStructure=new ResponseStructure<>();
		List<Items> list=foodOrder.getItems();
		double totalprice=0;
		for(Items items:list) {
			totalprice+=items.getCost()*items.getQuantity();
			foodOrder.setTotalprice(totalprice);
		}
		responseStructure.setStatus(HttpStatus.CREATED.value());
		responseStructure.setMessage("user successfully saved");
		responseStructure.setData(dao.saveFoodOrder(foodOrder));
		return new ResponseEntity<ResponseStructure<FoodOrder>>(responseStructure,HttpStatus.CREATED);		
		
	}

	public ResponseEntity<ResponseStructure<FoodOrder>> updateFoodOrder(FoodOrder foodOrder, int id) {
		ResponseStructure<FoodOrder> responseStructure=new ResponseStructure<>();
		FoodOrder foodOrder1=dao.updateFoodOrder(foodOrder,id);
		if( foodOrder1!=null) {
			List<Items> list=foodOrder1.getItems();
			double totalprice=0;
			for(Items items:list) {
				totalprice+=items.getCost()*items.getQuantity();
			}
			foodOrder.setTotalprice(totalprice);
			responseStructure.setStatus(HttpStatus.OK.value());
			responseStructure.setMessage("user successfully updated");
			responseStructure.setData(foodOrder);
			return new ResponseEntity<ResponseStructure<FoodOrder>>(responseStructure,HttpStatus.OK);		
			}else {
		throw new UserIdNotFoundException("foodOrder id is not present");
			}
	}
			
			
	public ResponseEntity<ResponseStructure<FoodOrder>> deleteFoodOrder(int id) {
		FoodOrder foodOrder=dao.deleteFoodOrder(id);
		ResponseStructure<FoodOrder> responseStructure=new ResponseStructure<>();
		if(foodOrder !=null) {
			responseStructure.setStatus(HttpStatus.OK.value());
			responseStructure.setMessage("user successfully deleted");
			responseStructure.setData(foodOrder);
			return new ResponseEntity<ResponseStructure<FoodOrder>>(responseStructure,HttpStatus.OK);	
			}
		throw new UserIdNotFoundException("foodOrder id is not present");
				
	}

		
   public ResponseEntity<ResponseStructure<FoodOrder>> getFoodOrde(int id) {
		FoodOrder foodOrder=dao.getFoodOrderById(id);
		ResponseStructure<FoodOrder> responseStructure=new ResponseStructure<>();
		if(foodOrder!=null) {
			List<Items> list=foodOrder.getItems();
			double totalprice=0;
			for(Items items:list) {
				totalprice+=items.getCost()*items.getQuantity();
				foodOrder.setTotalprice(totalprice);
				responseStructure.setStatus(HttpStatus.FOUND.value());
				responseStructure.setMessage("user successfully get");
				responseStructure.setData(foodOrder);
				{
					return new ResponseEntity<ResponseStructure<FoodOrder>>(responseStructure,HttpStatus.FOUND);	
				}
			}
		}
		throw new UserIdNotFoundException("foodOrder id is not present");
   }
	}
			
			
				

		
   
		
   

				
			
	
		


